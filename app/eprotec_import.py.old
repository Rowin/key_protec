import requests
from lxml import html
import re
from models import User, Habilitations
from pony.orm import db_session

url_base = "https://test.franceprotectioncivile.org"


def get_export(eprotec_session):
    url = f"{url_base}/export.php"
    params = {
        "filter": 37,  # Section ID
        "subsections": 1,  # Include subsections
        "exp": "groupes",  # groupes|roles
        "affichage": "xls",  # xls|ecran
        "show": True,
    }

    r = eprotec_session.get(url, params=params)

    if r.url == f"{url_base}/lost_session.php" or "lost_session.php" in r.text:
        return False
    else:
        return r.content


def reconnect(eprotec_session):
    r = eprotec_session.get(f"{url_base}/index.php")
    form = html.fromstring(r.content).forms[0]
    action = form.action

    login_dict = {"id": "ID", "pwd": "PWD"}

    eprotec_session.post(f"{url_base}/{action}", data=login_dict)


@db_session
def refresh_habilitations():
    s = requests.Session()

    content = get_export(s)
    if not content:
        reconnect(s)
        content = get_export(s)

    tree = html.fromstring(content)
    table = tree.xpath("//table[@id='exportTable']")[0]
    thead, tbody = table

    headers = [td.text_content().lower() for td in thead[0][1:]]
    headers.insert(0, "#")
    headers = [
        "id",
        "lastname",
        "firstname",
        "section",
        "hab_1",
        "lvl_1",
        "hab_2",
        "lvl_2",
    ]

    for tr in tbody:
        a = tr.xpath("td//a")[0].get("href")
        (i,) = re.search("pompier=(\\d+)$", a).groups(1)
        data = [td.text_content().strip() for td in tr[1:]]
        data.insert(0, i)
        user = dict(zip(headers, data))

        hab_1 = Habilitations.get(name=user["hab_1"])
        if hab_1 is None:
            hab_1 = Habilitations(name=user["hab_1"])

        hab_2 = Habilitations.get(name=user["hab_2"])
        if hab_2 is None:
            hab_2 = Habilitations(name=user["hab_2"])

        del user["lvl_1"], user["lvl_2"], user["section"], user["hab_1"], user["hab_2"]
        if User.exists(id=i):
            User[id].set(**user, habilitations=[hab_1, hab_2])
        else:
            User(**user, habilitations=[hab_1, hab_2])

    # with open('user_habilitation.csv', 'w') as f:
    #     writer = csv.DictWriter(f, fieldnames=headers)
    #     writer.writeheader()

    #     for tr in tbody:
    #         a = tr.xpath('td//a')[0].get('href')
    #         i, = re.search("pompier=(\\d+)$", a).groups(1)
    #         data = [td.text_content().strip() for td in tr[1:]]
    #         data.insert(0, i)
    #         user = dict(zip(headers, data))
    #         writer.writerow(user)


# def get_habilitations():
#     if time.time() - os.stat('user_habilitation.csv').st_mtime >= 3600:
#         refresh_habilitations()

#     habilitations = pd.read_csv('user_habilitation.csv')
#     return habilitations[['#', 'nom', 'prÃ©nom', 'permission 1', 'permission 2']]


# def get_user_hab(id):
#     habilitations = get_habilitations()
#     # habilitations[]


if __name__ == "__main__":
    refresh_habilitations()
